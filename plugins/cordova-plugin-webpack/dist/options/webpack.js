"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var supports_color_1 = __importDefault(require("supports-color"));
var constants_1 = __importDefault(require("webpack-cli/bin/utils/constants"));
var _a = constants_1.default.GROUPS, CONFIG_GROUP = _a.CONFIG_GROUP, BASIC_GROUP = _a.BASIC_GROUP, MODULE_GROUP = _a.MODULE_GROUP, OUTPUT_GROUP = _a.OUTPUT_GROUP, ADVANCED_GROUP = _a.ADVANCED_GROUP, RESOLVE_GROUP = _a.RESOLVE_GROUP, OPTIMIZE_GROUP = _a.OPTIMIZE_GROUP, DISPLAY_GROUP = _a.DISPLAY_GROUP;
var options = {
    config: {
        type: 'string',
        describe: 'Path to the config file',
        group: CONFIG_GROUP,
        defaultDescription: 'webpack.config.js or webpackfile.js',
        requiresArg: true,
    },
    'config-register': {
        type: 'array',
        alias: 'r',
        describe: 'Preload one or more modules before loading the webpack configuration',
        group: CONFIG_GROUP,
        defaultDescription: 'module id or path',
        requiresArg: true,
    },
    'config-name': {
        type: 'string',
        describe: 'Name of the config to use',
        group: CONFIG_GROUP,
        requiresArg: true,
    },
    env: {
        describe: 'Environment passed to the config, when it is a function',
        group: CONFIG_GROUP,
    },
    mode: {
        type: 'string',
        choices: ['development', 'production', 'none'],
        describe: 'Enable production optimizations or development hints.',
        group: CONFIG_GROUP,
        requiresArg: true,
    },
    context: {
        type: 'string',
        describe: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        group: BASIC_GROUP,
        defaultDescription: 'The current directory',
        requiresArg: true,
    },
    entry: {
        type: 'string',
        describe: 'The entry point(s) of the compilation.',
        group: BASIC_GROUP,
        requiresArg: true,
    },
    'module-bind': {
        type: 'string',
        describe: 'Bind an extension to a loader',
        group: MODULE_GROUP,
        requiresArg: true,
    },
    'module-bind-post': {
        type: 'string',
        describe: 'Bind an extension to a post loader',
        group: MODULE_GROUP,
        requiresArg: true,
    },
    'module-bind-pre': {
        type: 'string',
        describe: 'Bind an extension to a pre loader',
        group: MODULE_GROUP,
        requiresArg: true,
    },
    output: {
        alias: 'o',
        describe: 'The output path and file for compilation assets',
        group: OUTPUT_GROUP,
        requiresArg: true,
    },
    'output-path': {
        type: 'string',
        describe: 'The output directory as **absolute path** (required).',
        group: OUTPUT_GROUP,
        defaultDescription: 'The current directory',
        requiresArg: true,
    },
    'output-filename': {
        type: 'string',
        describe: 'Specifies the name of each output file on disk. You must **not** specify an absolute path here! The `output.path` option determines the location on disk the files are written to, filename is used solely for naming the individual files.',
        group: OUTPUT_GROUP,
        defaultDescription: '[name].js',
        requiresArg: true,
    },
    'output-chunk-filename': {
        type: 'string',
        describe: 'The filename of non-entry chunks as relative path inside the `output.path` directory.',
        group: OUTPUT_GROUP,
        defaultDescription: 'filename with [id] instead of [name] or [id] prefixed',
        requiresArg: true,
    },
    'output-source-map-filename': {
        type: 'string',
        describe: 'The filename of the SourceMaps for the JavaScript files. They are inside the `output.path` directory.',
        group: OUTPUT_GROUP,
        requiresArg: true,
    },
    'output-public-path': {
        type: 'string',
        describe: 'Add public path information',
        group: OUTPUT_GROUP,
        requiresArg: true,
    },
    'output-jsonp-function': {
        type: 'string',
        describe: 'The JSONP function used by webpack for async loading of chunks.',
        group: OUTPUT_GROUP,
        requiresArg: true,
    },
    'output-pathinfo': {
        type: 'boolean',
        describe: 'Include comments with information about the modules.',
        group: OUTPUT_GROUP,
    },
    'output-library': {
        type: 'array',
        describe: 'Expose the exports of the entry point as library',
        group: OUTPUT_GROUP,
        requiresArg: true,
    },
    'output-library-target': {
        type: 'string',
        describe: 'Type of library',
        choices: [
            'var',
            'assign',
            'this',
            'window',
            'self',
            'global',
            'commonjs',
            'commonjs2',
            'commonjs-module',
            'amd',
            'umd',
            'umd2',
            'jsonp',
        ],
        group: OUTPUT_GROUP,
        requiresArg: true,
    },
    'records-input-path': {
        type: 'string',
        describe: 'Store compiler state to a json file.',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    'records-output-path': {
        type: 'string',
        describe: 'Store compiler state to a json file.',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    'records-path': {
        type: 'string',
        describe: 'Store/Load compiler state from/to a json file. This will result in persistent ids of modules and chunks. An absolute path is expected. `recordsPath` is used for `recordsInputPath` and `recordsOutputPath` if they left undefined.',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    define: {
        type: 'string',
        describe: 'Define any free var in the bundle',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    target: {
        type: 'string',
        choices: [
            'web',
            'webworker',
            'node',
            'async-node',
            'node-webkit',
            'electron-main',
            'electron-renderer',
        ],
        describe: 'Environment to build for',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    cache: {
        type: 'boolean',
        describe: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        default: null,
        group: ADVANCED_GROUP,
        defaultDescription: "It's enabled by default when watching",
    },
    watch: {
        type: 'boolean',
        alias: 'w',
        describe: 'Enter watch mode, which rebuilds on file change.',
        group: BASIC_GROUP,
    },
    'watch-stdin': {
        type: 'boolean',
        alias: 'stdin',
        describe: 'Stop watching when stdin stream has ended',
        group: ADVANCED_GROUP,
    },
    'watch-aggregate-timeout': {
        describe: 'Delay the rebuilt after the first change. Value is a time in ms.',
        type: 'number',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    'watch-poll': {
        type: 'string',
        describe: 'Enable polling mode for watching',
        group: ADVANCED_GROUP,
    },
    hot: {
        type: 'boolean',
        describe: 'Enables Hot Module Replacement',
        group: ADVANCED_GROUP,
    },
    debug: {
        type: 'boolean',
        describe: 'Switch loaders to debug mode',
        group: BASIC_GROUP,
    },
    devtool: {
        type: 'string',
        describe: 'A developer tool to enhance debugging.',
        group: BASIC_GROUP,
        requiresArg: true,
    },
    'resolve-alias': {
        type: 'string',
        describe: 'Redirect module requests',
        group: RESOLVE_GROUP,
        requiresArg: true,
    },
    'resolve-extensions': {
        type: 'array',
        describe: 'Extensions added to the request when trying to find the file',
        group: RESOLVE_GROUP,
        requiresArg: true,
    },
    'resolve-loader-alias': {
        type: 'string',
        describe: 'Setup a loader alias for resolving',
        group: RESOLVE_GROUP,
        requiresArg: true,
    },
    'optimize-max-chunks': {
        describe: 'Try to keep the chunk count below a limit',
        group: OPTIMIZE_GROUP,
        requiresArg: true,
    },
    'optimize-min-chunk-size': {
        describe: 'Minimal size for the created chunk',
        group: OPTIMIZE_GROUP,
        requiresArg: true,
    },
    'optimize-minimize': {
        type: 'boolean',
        describe: 'Enable minimizing the output. Uses optimization.minimizer.',
        group: OPTIMIZE_GROUP,
    },
    prefetch: {
        type: 'string',
        describe: 'Prefetch this request (Example: --prefetch ./file.js)',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    provide: {
        type: 'string',
        describe: 'Provide these modules as free vars in all modules (Example: --provide jQuery=jquery)',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    'labeled-modules': {
        type: 'boolean',
        describe: 'Enables labeled modules',
        group: ADVANCED_GROUP,
    },
    plugin: {
        type: 'string',
        describe: 'Load this plugin',
        group: ADVANCED_GROUP,
        requiresArg: true,
    },
    bail: {
        type: 'boolean',
        describe: 'show reasons why optimization bailed out for modules',
        group: ADVANCED_GROUP,
        default: null,
    },
    profile: {
        type: 'boolean',
        describe: 'Capture timing information for each module.',
        group: ADVANCED_GROUP,
        default: null,
    },
    d: {
        type: 'boolean',
        describe: 'shortcut for --debug --devtool eval-cheap-module-source-map --output-pathinfo',
        group: BASIC_GROUP,
    },
    p: {
        type: 'boolean',
        describe: 'shortcut for --optimize-minimize --define process.env.NODE_ENV="production"',
        group: BASIC_GROUP,
    },
    silent: {
        type: 'boolean',
        describe: 'Prevent output from being displayed in stdout',
    },
    json: {
        type: 'boolean',
        alias: 'j',
        describe: 'Prints the result as JSON.',
    },
    progress: {
        type: 'boolean',
        describe: 'Print compilation progress in percentage',
        group: BASIC_GROUP,
    },
    color: {
        type: 'boolean',
        alias: 'colors',
        default: function () { return supports_color_1.default.stdout; },
        group: DISPLAY_GROUP,
        describe: 'Force colors on the console',
    },
    'no-color': {
        type: 'boolean',
        alias: 'no-colors',
        group: DISPLAY_GROUP,
        describe: 'Force no colors on the console',
    },
    'sort-modules-by': {
        type: 'string',
        group: DISPLAY_GROUP,
        describe: 'Sorts the modules list by property in module',
    },
    'sort-chunks-by': {
        type: 'string',
        group: DISPLAY_GROUP,
        describe: 'Sorts the chunks list by property in chunk',
    },
    'sort-assets-by': {
        type: 'string',
        group: DISPLAY_GROUP,
        describe: 'Sorts the assets list by property in asset',
    },
    'hide-modules': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Hides info about modules',
    },
    'display-exclude': {
        type: 'string',
        group: DISPLAY_GROUP,
        describe: 'Exclude modules in the output',
    },
    'display-modules': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display even excluded modules in the output',
    },
    'display-max-modules': {
        type: 'number',
        group: DISPLAY_GROUP,
        describe: 'Sets the maximum number of visible modules in output',
    },
    'display-chunks': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display chunks in the output',
    },
    'display-entrypoints': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display entry points in the output',
    },
    'display-origins': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display origins of chunks in the output',
    },
    'display-cached': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display also cached modules in the output',
    },
    'display-cached-assets': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display also cached assets in the output',
    },
    'display-reasons': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display reasons about module inclusion in the output',
    },
    'display-depth': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display distance from entry point for each module',
    },
    'display-used-exports': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display information about used exports in modules (Tree Shaking)',
    },
    'display-provided-exports': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display information about exports provided from modules',
    },
    'display-optimization-bailout': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display information about why optimization bailed out for modules',
    },
    'display-error-details': {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Display details about errors',
    },
    display: {
        type: 'string',
        choices: [
            '',
            'verbose',
            'detailed',
            'normal',
            'minimal',
            'errors-only',
            'none',
        ],
        group: DISPLAY_GROUP,
        describe: 'Select display preset',
    },
    verbose: {
        type: 'boolean',
        group: DISPLAY_GROUP,
        describe: 'Show more details',
    },
    'info-verbosity': {
        type: 'string',
        default: 'info',
        choices: ['none', 'info', 'verbose'],
        group: DISPLAY_GROUP,
        describe: 'Controls the output of lifecycle messaging e.g. Started watching files...',
    },
    'build-delimiter': {
        type: 'string',
        group: DISPLAY_GROUP,
        describe: 'Display custom text after build output',
    },
};
exports.default = options;
//# sourceMappingURL=webpack.js.map